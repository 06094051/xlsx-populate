"use strict";

const Workbook = require('../../lib/Workbook');

// Load the input workbook from file.
Workbook.fromBlankAsync("./row col size.xlsx")
    .then(workbook => {
        // // Modify the workbook.
        const sheet = workbook.sheet("Sheet1");

        sheet.column('A').width(15);
        sheet.column('B').width(25);

        sheet.cell("A1").value("bold").style("bold", true)
            .relativeCell(1, 0).value("italic").style("italic", true)
            .relativeCell(1, 0).value("underline").style("underline", true)
            .relativeCell(1, 0).value("double underline").style("underline", "double")
            .relativeCell(1, 0).value("strikethrough").style("strikethrough", true)
            .relativeCell(1, 0).value("superscript").style("superscript", true)
            .relativeCell(1, 0).value("subscript").style("subscript", true)
            .relativeCell(1, 0).value("larger").style("fontSize", 14)
            .relativeCell(1, 0).value("smaller").style("fontSize", 8)
            .relativeCell(1, 0).value("comic sans").style("fontFamily", "Comic Sans MS")
            .relativeCell(1, 0).value("left").style("horizontalAlignment", "left")
            .relativeCell(1, 0).value("center").style("horizontalAlignment", "center")
            .relativeCell(1, 0).value("right").style("horizontalAlignment", "right")
            .relativeCell(1, 0).value("top").style("verticalAlignment", "top")
            .relativeCell(1, 0).value("middle").style("verticalAlignment", "center")
            .relativeCell(1, 0).value("bottom").style("verticalAlignment", "bottom")
            .relativeCell(1, 0).value("this is wrapped text").style("wrappedText", true)
            .relativeCell(1, 0)//.value("background color").style().fillBackgroundColor("ff0000");
            .relativeCell(1, 0).value("rgb font color").style("fontColor", "ff0000")
            .relativeCell(1, 0).value("indexed font color").style("fontColor", 4)
            .relativeCell(1, 0).value("top border").style("topBorderStyle", "thin")
            .relativeCell(1, 0).value("left border").style("leftBorderStyle", "thin")
            .relativeCell(1, 0).value("right border").style("rightBorderStyle", "thin")
            .relativeCell(1, 0).value("bottom border").style("bottomBorderStyle", "thin")
            .relativeCell(1, 0).value("double bottom border").style("bottomBorderStyle", "double")
            .relativeCell(1, 0).value("medium bottom border").style("bottomBorderStyle", "medium")
            .relativeCell(1, 0).value("thick bottom border").style("bottomBorderStyle", "thick")
            .relativeCell(1, 0).value("indent").style("indent", 2)
            .relativeCell(1, 0).value("text rotation").style("textRotation", 20)
            .relativeCell(1, 0).value("angle counterclockwise").style("angleTextCounterclockwise", true)
            .relativeCell(1, 0).value("angle clockwise").style("angleTextClockwise", true)
            .relativeCell(1, 0).value("verticalText").style("verticalText", true)
            .relativeCell(1, 0).value("rotate text up").style("rotateTextUp", true)
            .relativeCell(1, 0).value("rotate text down").style("rotateTextDown", true)
            .relativeCell(1, 0).value("number").relativeCell(0, 1).value(1.2).style("numberFormat", "0.00")
            .relativeCell(1, -1).value("currency").relativeCell(0, 1).value(1.2).style("numberFormat", `$#,##0.00`)
            .relativeCell(1, -1).value("accounting").relativeCell(0, 1).value(1.2).style("numberFormat", `_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)`)
            .relativeCell(1, -1).value("short date").relativeCell(0, 1).value(1.2).style("numberFormat", "m/d/yyyy")
            .relativeCell(1, -1).value("long date").relativeCell(0, 1).value(1.2).style("numberFormat", `[$-x-sysdate]dddd, mmmm dd, yyyy`)
            .relativeCell(1, -1).value("time").relativeCell(0, 1).value(1.2).style("numberFormat", `[$-x-systime]h:mm:ss AM/PM`)
            .relativeCell(1, -1).value("percentage").relativeCell(0, 1).value(1.2).style("numberFormat", "0.00%")
            .relativeCell(1, -1).value("fraction").relativeCell(0, 1).value(1.2).style("numberFormat", "# ?/?")
            .relativeCell(1, -1).value("scientific").relativeCell(0, 1).value(1.2).style("numberFormat", "0.00E+00")
            .relativeCell(1, -1).value("text").relativeCell(0, 1).value(1.2).style("numberFormat", "@");

        sheet.cell("A1").call(cell => console.log(cell.value(), cell.style(["bold"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["italic"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["underline"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["underline"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["strikethrough"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["superscript"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["subscript"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["fontSize"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["fontSize"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["fontFamily"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["horizontalAlignment"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["horizontalAlignment"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["horizontalAlignment"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["verticalAlignment"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["verticalAlignment"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["verticalAlignment"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["wrappedText"])))
            .relativeCell(1, 0)//.call(cell => console.log(cell.value(), cell.style(["backgroundColor"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["fontColor"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["fontColor"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["topBorderStyle"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["leftBorderStyle"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["rightBorderStyle"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["bottomBorderStyle"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["bottomBorderStyle"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["bottomBorderStyle"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["bottomBorderStyle"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["indent"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["textRotation"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["angleTextCounterclockwise"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["angleTextClockwise"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["verticalText"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["rotateTextUp"])))
            .relativeCell(1, 0).call(cell => console.log(cell.value(), cell.style(["rotateTextDown"])))
            .relativeCell(1, 1).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))
            .relativeCell(1, 0).call(cell => console.log(cell.relativeCell(0, -1).value(), cell.style(["numberFormat"])))

        // Write to file.
        return workbook.toFileAsync("./out.xlsx");
    });
