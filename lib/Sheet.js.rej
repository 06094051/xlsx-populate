diff a/lib/Sheet.js b/lib/Sheet.js	(rejected hunks)
@@ -3,60 +3,66 @@
 // TODO: Tests
 // TODO: JSDoc
 
-const DOMParser = require('xmldom').DOMParser;
-const parser = new DOMParser();
 const Row = require("./Row");
 const Column = require("./Column");
 const Range = require("./Range");
 const debug = require("./debug")("Sheet");
+const jq = require("./jq")
+const _ = require("lodash");
 
 const utils = require("./utils");
 
 class Sheet {
-    constructor(workbook, idNode, text) {
+    constructor(workbook, idNode, node) {
         debug("constructor(...)");
 
         this._maxSharedFormulaId = -1;
         this._workbook = workbook;
         this._idNode = idNode;
-        this._xml = parser.parseFromString(text);
+        this._node = node;
+
+        console.log(JSON.stringify(node, null, 4));
 
         // Create the rows.
         this._rows = [];
-        this._sheetDataNode = this._xml.documentElement.getElementsByTagName("sheetData")[0];
-        const rowNodes = this._sheetDataNode.childNodes;
-        for (let i = 0; i < rowNodes.length; i++) {
-            const rowNode = rowNodes[i];
+        this._sheetDataNode = this._node.worksheet.sheetData[0];
+        _.forEach(this._sheetDataNode.row, rowNode => {
+            if (!rowNode) return;
             const row = new Row(this, rowNode);
             this._rows[row.rowNumber()] = row;
-        }
+        });
 
         // Create the columns.
         this._columns = [];
-        this._colsNode = this._xml.documentElement.getElementsByTagName("cols")[0];
-        if (!this._colsNode) {
-            this._colsNode = this._xml.createElement("cols");
-
-            // Must come before sheetData
-            this._xml.documentElement.insertBefore(this._colsNode, this._sheetDataNode);
+        if (jq.has(this._node, "worksheet.cols[0]")) {
+            this._colsNode = this._node.worksheet.cols[0];
+        } else {
+            this._colsNode = {};
         }
 
-        // Excel will merge columns using min/max. Break them apart.
-        const colNodes = this._colsNode.childNodes;
-        for (let i = colNodes.length - 1; i >= 0; i--) {
-            const colNode = colNodes[i];
-            const min = parseInt(colNode.getAttribute("min"));
-            const max = parseInt(colNode.getAttribute("max"));
-
-            for (let columnNumber = min; columnNumber <= max; columnNumber++) {
-                const clonedColNode = colNode.cloneNode(true);
-                clonedColNode.setAttribute("min", columnNumber);
-                clonedColNode.setAttribute("max", columnNumber);
-                this._columns[columnNumber] = new Column(this, clonedColNode);
-            }
-
-            this._colsNode.removeChild(colNode);
-        }
+        // if (!this._colsNode) {
+        //     this._colsNode = this._node.worksheet.cols[0] = [{}];
+        //
+        //     // // Must come before sheetData
+        //     // this._xml.documentElement.insertBefore(this._colsNode, this._sheetDataNode);
+        // }
+        //
+        // // Excel will merge columns using min/max. Break them apart.
+        // const colNodes = this._colsNode.childNodes;
+        // for (let i = colNodes.length - 1; i >= 0; i--) {
+        //     const colNode = colNodes[i];
+        //     const min = parseInt(colNode.getAttribute("min"));
+        //     const max = parseInt(colNode.getAttribute("max"));
+        //
+        //     for (let columnNumber = min; columnNumber <= max; columnNumber++) {
+        //         const clonedColNode = colNode.cloneNode(true);
+        //         clonedColNode.setAttribute("min", columnNumber);
+        //         clonedColNode.setAttribute("max", columnNumber);
+        //         this._columns[columnNumber] = new Column(this, clonedColNode);
+        //     }
+        //
+        //     this._colsNode.removeChild(colNode);
+        // }
     }
 
     workbook() {
